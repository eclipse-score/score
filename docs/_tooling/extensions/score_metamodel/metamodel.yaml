# *******************************************************************************
# Copyright (c) 2025 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0
#
# SPDX-License-Identifier: Apache-2.0
# *******************************************************************************
# yaml-language-server: $schema=./metamodel-schema.json

needs_types_base_options:
  optional_options:
    source_code_link: "^https://github.com/eclipse-score/score/blob/.*$"
  # Custom semantic validation rules
  prohibited_words:
    title:
      - shall
      - must
      - will
    content:
      - just
      - about
      - really
      - some
      - thing
      - absolutely

needs_types:

  ##############################################################################
  # Process Metamodel
  ##############################################################################
  # Standards
  std_req:
    title: "Standard Requirement"
    prefix: "std_req__"
    mandatory_options:
      id: "std_req__(iso26262|isosae21434|isopas8926|aspice_40)__[0-9a-zA-Z_-]*$"
      status: "^(valid)$"
    optional_links:
      links: "^.*$"

  std_wp:
    title: "Standard Work Product"
    prefix: "std_wp__"
    mandatory_options:
      id: "std_wp__(iso26262|isosae21434|isopas8926|aspice_40)__[0-9a-z_]*$"
      status: "^(valid)$"
  # Workflow
  workflow:
    title: "Workflow"
    prefix: "wf__"
    mandatory_options:
      id: "^wf__[0-9a-z_]*$"
      status: "^(valid|draft)$"
    mandatory_links:
      input: "^wp__.*$"
      output: "^wp__.*$"
      approved_by: "^rl__.*$"
      responsible: "^rl__.*$"
    optional_links:
      supported_by: "^rl__.*$"
      contains: "^gd_(req|temp|chklst|guidl|meth)__.*$"
      has: "^doc_(getstrt|concept)__.*$"
  # Guidances
  gd_req:
    title: "Process Requirements"
    prefix: "gd_req__"
    mandatory_options:
      id: "^gd_req__[0-9a-z_]*$"
      status: "^(valid|draft)$"
    optional_links:
      complies: "^std_req__(iso26262|isosae21434|isopas8926|aspice_40)__.*$"
      satisfies: "^wf__.*$"

  gd_temp:
    title: "Process Template"
    prefix: "gd_temp__"
    mandatory_options:
      id: "^gd_temp__[0-9a-z_]*$"
      status: "^(valid|draft)$"
    optional_links:
      complies: "std_req__(iso26262|isodae21434|isopas8926|aspice_40)__.*$"

  gd_chklst:
    title: "Process Checklist"
    prefix: "gd_chklst__"
    mandatory_options:
      id: "^gd_chklst__[0-9a-z_]*$"
      status: "^(valid|draft)$"
    optional_links:
      complies: "std_req__(iso26262|isodae21434|isopas8926|aspice_40)__.*$"

  gd_guidl:
    title: "Process Guideline"
    prefix: "gd_guidl__"
    mandatory_options:
      id: "^gd_guidl__[0-9a-z_]*$"
      status: "^(valid|draft)$"
    optional_links:
      complies: "std_req__(iso26262|isosae21434|isopas8926|aspice_40)__.*$"

  gd_method:
    title: "Process Method"
    prefix: "gd_meth__"
    mandatory_options:
      id: "^gd_meth__[0-9a-z_]*$"
      status: "^(valid|draft)$"
    optional_links:
      complies: "std_req__(iso26262|isosae21434|isopas8926|aspice_40)__.*$"
  # S-CORE Workproduct
  workproduct:
    title: "Workproduct"
    prefix: "wp__"
    mandatory_options:
      id: "^wp__[0-9a-z_]*$"
      status: "^(valid|draft)$"
    optional_links:
      complies: "std_(wp__iso26262|wp__isosae21434|wp__isopas8926|iic_aspice_40)__.*$"
  # Role
  role:
    title: "Role"
    prefix: "rl__"
    mandatory_options:
      id: "^rl__[0-9a-z_]*$"
    optional_links:
      contains: "^rl__.*$"
  # Documents
  doc_concept:
    title: "Concept Definition"
    prefix: "doc_concept__"
    mandatory_options:
      id: "^doc_concept__[0-9a-z_]*$"
      status: "^(valid|draft)$"

  doc_getstrt:
    title: "Getting Startet"
    prefix: "doc_getstrt__"
    mandatory_options:
      id: "^doc_getstrt__[0-9a-z_]*$"
      status: "^(valid|draft)$"

  ##############################################################################
  # S-CORE Metamodel
  ##############################################################################
  # General
  document:
    title: "Generic Document"
    prefix: "doc__"
    mandatory_options:
      id: "^doc__[0-9a-z_]*$"
      status: "^(valid|draft|invalid)$"
    optional_options:
      safety: "^(QM|ASIL_B|ASIL_D)$"
      realizes: "^wp__.+$"
  # The following 3 guidance requirements enforce the requirement structure and attributes:
  # req-Id: gd_req__req__structure
  # req-Id: gd_req__requirements_attr_description
  # req-Id: gd_req__req__linkage
  # Requirements
  stkh_req:
    title: "Stakeholder Requirement"
    prefix: "stkh_req__"
    mandatory_options:
      id: "^stkh_req__[0-9a-z_]*$"
      reqtype: "^(Functional|Interface|Process|Legal|Non-Functional)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
      rationale: "^.+$"
    optional_options:
      security: "^(YES|NO)$"
      codelink: "^.*$"
      testlink: "^.*$"
      reqcovered: "^(YES|NO)$"
      testcovered: "^(YES|NO)$"
      hash: "^.*$"

  feat_req:
    title: "Feature Requirement"
    prefix: "feat_req__"
    style: "node"
    mandatory_options:
      id: "^feat_req__[0-9a-z_]*$"
      reqtype: "^(Functional|Interface|Process|Legal|Non-Functional)$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
    mandatory_links:
      # req-Id: gd_req__req__linkage_fulfill
      satisfies: "^stkh_req__.*$"
    optional_options:
      codelink: "^.*$"
      testlink: "^.*$"
      reqcovered: "^(YES|NO)$"
      testcovered: "^(YES|NO)$"
      hash: "^.*$"

  comp_req:
    title: "Component Requirement"
    prefix: "comp_req__"
    mandatory_options:
      id: "^comp_req__[0-9a-z_]*$"
      reqtype: "^(Functional|Interface|Process|Legal|Non-Functional)$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
    mandatory_links:
      satisfies: "^feat_req__.*$"
    optional_options:
      codelink: "^.*$"
      testlink: "^.*$"
      reqcovered: "^(YES|NO)$"
      testcovered: "^(YES|NO)$"
      hash: "^.*$"

  tool_req:
    title: "Tool Requirement"
    prefix: "tool_req__"
    mandatory_options:
      id: "^tool_req__[0-9a-z_]*$"
      reqtype: "^(Functional|Interface|Process|Legal|Non-Functional)$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
    mandatory_links:
      satisfies: "^stkh_req__.*$"
    optional_options:
      codelink: "^.*$"
      testlink: "^.*$"
      reqcovered: "^(YES|NO)$"
      testcovered: "^(YES|NO)$"
      hash: "^.*$"

  aou_req:
    title: "Assumption of Use"
    prefix: "aou_req__"
    mandatory_options:
      id: "^aou_req__[0-9a-z_]*$"
      reqtype: "^(Functional|Interface|Process|Legal|Non-Functional)$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
    optional_options:
      codelink: "^.*$"
      testlink: "^.*$"
      reqcovered: "^(YES|NO)$"
      testcovered: "^(YES|NO)$"
      hash: "^.*$"
    optional_links:
      mitigates: "^.*$"
  # Architecture
  feat_arc_sta:
    title: "Feature Architecture Static View"
    prefix: "feat_arc_sta__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      id: "^feat_arc_sta__[0-9a-z_]+$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
    mandatory_links:
      includes: "^logic_arc_int(_op)*__.+$"
    optional_links:
      fulfils: "^feat_req__.+$"

  feat_arc_dyn:
    title: "Feature Architecture Dynamic View"
    prefix: "feat_arc_dyn__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      id: "^feat_arc_dyn__[0-9a-z_]+$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
    mandatory_links:
      fulfils: "^feat_req__.+$"

  logic_arc_int:
    title: "Logical Architecture Interfaces"
    prefix: "logic_arc_int__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      id: "^logic_arc_int__[0-9a-z_]+$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
    optional_links:
      includes: "^logic_arc_int_op__.+$"
      fulfils: "^comp_req__.+$"

  logic_arc_int_op:
    title: "Logical Architecture Interface Operation"
    prefix: "logic_arc_int_op__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      id: "^logic_arc_int_op__[0-9a-z_]+$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
    mandatory_links:
      included_by: "^logic_arc_int__.+$"

  mod_view_sta:
    title: "Module Architecture Static View"
    prefix: "mod_view_sta__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      id: "^mod_view_sta__[0-9a-z_]+$"
    mandatory_links:
      includes: "^comp_arc_sta__.+$"

  mod_view_dyn:
    title: "Module Architecture Dynamic View"
    prefix: "mod_view_dyn__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      id: "^mod_view_dyn__[0-9a-z_]+$"

  comp_arc_sta:
    title: "Component Architecture Static View"
    prefix: "comp_arc_sta__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      id: "^comp_arc_sta__[0-9a-z_]+$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
    optional_links:
      implements: "^real_arc_int(_op)*__.+$"
      includes: "^comp_arc_sta__.+$"
      uses: "^real_arc_int(_op)*__.+$"
      fulfils: "^comp_req__.+$"

  comp_arc_dyn:
    title: "Component Architecture Dynamic View"
    prefix: "comp_arc_dyn__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      id: "^comp_arc_dyn__[0-9a-z_]+$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
    optional_links:
      fulfils: "^comp_req__.+$"

  real_arc_int:
    title: "Component Architecture Interfaces"
    prefix: "real_arc_int__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      id: "^real_arc_int__[0-9a-z_]+$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
      language: "^(cpp|rust)$"
    optional_links:
      fulfils: "^comp_req__.+$"

  real_arc_int_op:
    title: "Component Architecture Interface Operation"
    prefix: "real_arc_int_op__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      id: "^real_arc_int_op__[0-9a-z_]+$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
    mandatory_links:
      included_by: "^real_arc_int__.+$"
    optional_links:
      implements: "^logic_arc_int_op__.+$"


  review_header:
    prefix: "review__header"
    title: "Review Header"
    mandatory_options:
      id: "^review__header__[0-9a-z_]*$"
      reviewers: "^.*$"
      approvers: "^.*$"
      hash: "^.*$"
      template: "^.*$"

  # Implementation
  dd_sta:
    title: "Static detailed design"
    prefix: "dd_sta__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      id: "^dd_sta__[0-9a-z_]*$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
    mandatory_links:
      implements: "^comp_req__.*$"
      satisfies: "^comp_arc_sta__.*$"
    optional_links:
      includes: "^sw_unit__.*$"
  dd_dyn:
    title: "Dynamic detailed design"
    prefix: "dd_dyn__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      id: "^dd_dyn__[0-9a-z_]*$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
    mandatory_links:
      implements: "^comp_req__.*$"
      satisfies: "^comp_arc_sta__.*$"
  sw_unit:
    title: "Software unit"
    prefix: "sw_unit__"
    mandatory_options:
      id: "^sw_unit__[0-9a-z_]*$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"
  sw_unit_int:
    title: "Software unit interfaces"
    prefix: "sw_unit_int__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      id: "^sw_unit_int__[0-9a-z_]*$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      status: "^(valid|invalid)$"

# Extra link types, which shall be available and allow need types to be linked to each other.
# We use a dedicated linked type for each type of a connection, for instance from
# a specification to a requirement. This makes filtering and visualization of such connections
# much easier, as we can sure the target need of a link has always a specific type.
# Docs: https://sphinx-needs.readthedocs.io/en/latest/configuration.html#needs-extra-links
needs_extra_links:
  ##############################################################
  #  Process Metamodel
  ##############################################################
  # Workflow
  contains:
    incoming: "contained by"
    outgoing: "contains"

  has:
    incoming: "relates to"
    outgoing: "has"

  input:
    incoming: "is input to"
    outgoing: "needs input"

  output:
    incoming: "is output from"
    outgoing: "outputs"

  # Roles
  responsible:
    incoming: "is responsible for"
    outgoing: "responsible"

  approved_by:
    incoming: "approves"
    outgoing: "approved by"

  supported_by:
    incoming: "supports"
    outgoing: "supported by"

  # Workproduct
  complies:
    incoming: "complies to"
    outgoing: "complies"

  ##############################################################
  #  S-CORE Metamodel
  ##############################################################
  # Requirements
  satisfies:
    incoming: "satisfied by"
    outgoing: "satisfies"

  # Architecture
  fulfils:
    incoming: "fulfilled by"
    outgoing: "fulfils"

  implements:
    incoming: "implemented by"
    outgoing: "implements"

  uses:
    incoming: "used by"
    outgoing: "uses"

  includes:
    incoming: "included by"
    outgoing: "includes"

  included_by:
    incoming: "includes"
    outgoing: "included by"
##############################################################
# Graph Checks
# The graph checks focus on the relation of the needs and their attributes.
# Checks are defined in the following way:
# check_name:
#   needs:defines the needs types to which the check should be applied
#   - [include / exclude]: need types to which the check should be applied;
#                          multiple need types can be defined by separating them with a comma;
#                          to perform the check on all needs types, set include to "."
#   - condition: defines (together with apply) the condition which the needs need to fulfill
#     - [and / or / xor / not]
# - check: defines the check that should be applied
#   - <relation>: defines the relation which is used derive the type of the parent need
#   - condition: defines the condition that should be checked
#     - [and / or / xor / not]
##############################################################
# req-Id: gd_req__req__linkage_architecture
# req-Id: gd_req__req__linkage_safety
graph_checks:
  # req-Id: gd_req__req__linkage_safety
  req_safety_linkage:
    needs:
      include: "comp_req, feat_req"
      condition:
        and:
          - "safety != QM"
          - "status == valid"
    check:
      satisfies:
        and:
          - "safety != QM"
          - "status == valid"
  req_linkage:
    needs:
      include: "comp_req, feat_req"
      condition: "status == valid"
    check:
      satisfies: "status == valid"
  # req-Id: gd_req__req__linkage_architecture
  arch_safety_linkage:
    needs:
      include: "comp_req, feat_req"
      condition:
        and:
          - "safety != QM"
          - "status == valid"
    check:
      fulfils:
        and:
          - "safety != QM"
          - "status == valid"
