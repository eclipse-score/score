doc generation 
================


Introduction
------------

As already explained in chapter First Module (TODO: link to the chapter) and chapter Technology OVerview (TODO: Link), we use
sphinx and sphinx-needs toolchain to generate documentation out of rst files, elements of s-core metamodel are modelled as
sphinx-needs elements.

Integration of the sphinx and sphinx-needs toolchain into bazel and s-core specific extensions are implemented in score_docs_as_code module.
Following document (TODO: link) provide an exhaustive description, how the documentation in s-core can be created and built. Here, we will
focus on a simple example.

First, we neede to define a target in bazel, so that we can generate html documentation from rst files. Such target is already provided
in the main top level BUILD file of the repository:

.. code-block:: python
    :linenos:

    docs(
        source_dir = "docs",
    )

The bazel rule docs needs source_dir as an input parameter. This directory will be given to the sphinx/sphinx-needs toolchain, which
will use this directory as source directory and will generate the html documentation based on the files located in the soure directory.
Sphinx toolchain will not rely here on any bazel dependencies, but will use its own mechanims to decide which files should be included or not
for documentation generation, that is well described in its documentation (TODO: link).

In general, two files are especially important for sphinx doc generation:

- docs/conf.py provides configuration for sphinx-toolchain.
  
  .. code-block:: python
    :linenos:
    :emphasize-lines: 3

    project = "Module Template Project"
    project_url = "https://eclipse-score.github.io/module_template/"
    project_prefix = "SCRAMPLE_"
    author = "S-CORE"
    version = "0.1"

    # -- General configuration ---------------------------------------------------
    # https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration


    extensions = [
        "sphinx_design",
        "sphinx_needs",
        "sphinxcontrib.plantuml",
        "score_plantuml",
        "score_metamodel",
        "score_draw_uml_funcs",
        "score_source_code_linker",
        "score_layout",
    ]

  As you can see, we use here special score configuration and score project extenstions. 
  Important is among others the line number 3, where you need to set the prefix for your module.
  This prefix will be used, when others modules need to reference sphinx-needs elements from your module.

- index.rst ist the main entry point, that includes all other rst files, that should be used for documentation
  generation  

  You can try to build the documentation using following command:

  .. code-block:: python
    :emphasize-lines: 1

    % bazel build //:docs

Do not be suprised, if the first time you run bazel command, it take a long time to execute it. The first time
you call bazel, it downloads everything locally to its cache folder, also all toolchain tarballs, and this can take
for a while. Next executions will be much faster. 

The command we've called will check the consistency of your documentation for errors but will not generate any html files.
To do so, run following command:

  .. code-block:: python
    :emphasize-lines: 1, 38

    % bazel run //:docs
    Running Sphinx v8.2.3
    loading translations [en]... done
    DEBUG: Found 0 need references in 0.00 seconds
    calculate directory_hash = e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 within 0.00019431114196777344 seconds.
    loading pickled environment... The configuration has changed (7 options: 'html_permalinks_icon', 'html_static_path', 'needs_layouts', 'needs_types', 'plantuml', ...)
    done
    building [mo]: targets for 0 po files that are out of date
    writing output... 
    building [html]: build_info mismatch, copying .buildinfo to .buildinfo.bak
    building [html]: targets for 1 source files that are out of date
    updating environment: [config changed ('skip_rescanning_via_source_code_linker')] 1 added, 0 changed, 0 removed
    reading sources... [100%] index
    Copying static files for sphinx-data-viewer support
    Copying static files for sphinx-needs datatables support
    Copying static style files for sphinx-needs
    looking for now-outdated files... none found
    pickling environment... done
    checking consistency... done
    preparing documents... done
    copying assets... 
    copying static files... 
    Writing evaluated template result to /home/_dev/scrample/_build/_static/basic.css
    Writing evaluated template result to /home/_dev/scrample/_build/_static/language_data.js
    Writing evaluated template result to /home/_dev/scrample/_build/_static/documentation_options.js
    copying static files: done
    copying extra files... 
    copying extra files: done
    copying assets: done

    generating indices... genindex done
    writing additional pages... search done
    dumping search index in English (code: en)... done
    dumping object inventory... done
    Needs successfully exported
    build succeeded.

    The HTML pages are in ../../../../../../../../../../../_dev/scrample/_build.

Now we have the generated html files, that we can copy somewhere and open them in a web browser.

Normally, when you're working on the documentation, you need a handy way to see the current status of your work in the web browser.
For this, one of the options would be to use live preview feature. The bazel target for this is automatically imported when you import
doc target into your BUILD file:

  .. code-block:: python
   
    load("@score_docs_as_code//:docs.bzl", "docs")

So now run following command:

  .. code-block:: python
    :emphasize-lines: 1, 9

    % bazel run //:live_preview

    ...

    Needs successfully exported
    build succeeded.

    The HTML pages are in ../../../../../../../../../../../_dev/playground_2/scrample/_build.
    [sphinx-autobuild] Serving on http://127.0.0.1:8000
    [sphinx-autobuild] Waiting to detect changes...
 
As you can see, a local server is started on following port and address: http://127.0.0.1:8000 .
Open it in your web browser and you should be able to see the current version of the documentation.

(TODO: screenshot).

The live preview feature stays active and rebuilds and reacts on every change in your documentation,
what makes work with the documentation very convenient. You can stop it by killing the bazel process
in the terminal (Ctrl + C).

Now it is time to replace the dummy context of the index.rst with some meaningful text,
as it is shown here (TODO: link to commit).